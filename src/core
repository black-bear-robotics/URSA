#!/usr/bin/env python
# Core robot logic
# This is where the decision-making happens, using the FSM.
# Other nodes, like pathfinder and manual, may
# be added for modularity.

import rospy
from std_msgs.msg import String
from nav_msgs.msg import OccupancyGrid, Path, MapMetaData
from util import fsm
from ursa.srv import DriveTo

class URSARobot:

	def __init__(self):
		# Set up the finite state machine
		rospy.loginfo("Robot online.")
		self.state = fsm.StateMachine()
		self.state.push(MappingField(self))

		#Publicly exposed robot properties
		rospy.set_param('collector_full', False) #do we have materials to dump?
		rospy.set_param('hold', True) #don't drive until human says so

		# Subsctibe to topics and collect data
		self.path = None
		rospy.Subscriber('path', Path, self.listen_path)

		# State tick. Run update method of current state
		rate = rospy.Rate(10)
		while not rospy.is_shutdown():
			self.state.update()
			rate.sleep()


	def listen_path(self, data):
		self.path = data.poses



#########################
# Robot Behavior States #
#########################

class MappingField:
	"""Initial state. Sweeps camera collects mapping data while waiting 
	for the command to start driving."""

	def __init__(self, robot):
		self.robot = robot
		self.done = False

		rospy.wait_for_service('find_target')
		self.find_target = rospy.ServiceProxy('find_target', TargetType)

		rospy.loginfo("Mapping field.")
		if rospy.get_param("hold"):
			rospy.loginfo("To release position hold: rosparam set /hold false")

	def condition(self):
		return not self.done

	def next(self):
		self.robot.state.push(MovingTo(self.robot))

	def do(self):
		# Sweep the camera
		
		# Try to pick a target and find a path to it
		try:
			what = 'home' if rospy.get_param("collector_full") else 'mining'
			self.find_target(what)
		except rospy.ServiceException as ex:
			rospy.logerr("Request to Pathfinder failed. %s", str(ex))
		
		if self.robot.path is not None and rospy.get_param("hold") is False:
			self.done = True



class MovingTo:
	"""Robot is driving to a destination. The next grid cell is popped off the
	list, and the command to move is sent to the Drive node."""

	def __init__(self, robot):
		self.robot = robot
		rospy.wait_for_service('drive_to')
		self.drive_to = rospy.ServiceProxy('drive_to', DriveTo)

	def condition(self):
		return len(self.robot.path) > 0

	def next(self):
		self.robot.state.push(Arriving(self.robot))

	def do(self):
		# Drive robot, sending command to drive control node
		cell = self.robot.path.pop()
		point = cell.pose.position
		rospy.loginfo("Driving to coordinate ({},{})".format(point.x, point.y))
		try:
			self.drive_to(cell.pose)
		except rospy.ServiceException as ex:
			rospy.logerr("Request to Drive node failed. %s", str(ex))



class Arriving:
	"""When the robot reaches the end of its established path, determine whether
	it is time to dig or dump the collected materials."""

	def __init__(self, robot):
		self.robot = robot

	def condition(self):
		return True

	def next(self):
		return

	def do(self):
		rospy.loginfo("Arrived at target cell.")
		self.robot.state.pop()
		if rospy.get_param("collector_full"):
			self.robot.state.push(Depositing(self.robot))
		else:
			self.robot.state.push(Digging(self.robot))



class Digging:
	def __init__(self, robot):
		self.robot = robot
		self.done = False
		rospy.loginfo("Digging...")

	def condition(self):
		return not self.done

	def next(self):
		rospy.loginfo("Digging complete.")
		rospy.set_param('collector_full', True)
		self.robot.state.push(MappingField(self.robot))

	def do(self):
		# Run motor routine while bin < full
		self.done = True



class Depositing:
	def __init__(self, robot):
		self.robot = robot
		self.done = False
		rospy.loginfo("Dumping...")

	def condition(self):
		return not self.done

	def next(self):
		rospy.loginfo("Dumping complete.")
		rospy.set_param('collector_full', False)
		self.robot.state.push(MappingField(self.robot))

	def do(self):
		# Run motor routine until collection bin is empty
		self.done = True



if __name__ == '__main__':
	try:
		rospy.init_node('core')
		URSARobot()
	except rospy.ROSInterruptException:
		pass
	
