#!/usr/bin/env python
# Pathfinding node.
# This will listen for new data from ORB_SLAM2 et al and
# rebroadcast messages containing the shortest path.

import rospy, random
from std_msgs.msg import String
from nav_msgs.msg import OccupancyGrid, Path, MapMetaData
from geometry_msgs.msg import PoseStamped, PointStamped
from pathfinding.core.diagonal_movement import DiagonalMovement
from pathfinding.core.grid import Grid
from pathfinding.finder.a_star import AStarFinder
from std_srvs.srv import Trigger, TriggerResponse
from ursa.srv import PathfinderTarget, PathfinderTargetResponse
from ursa.srv import TargetType, TargetTypeResponse
from util import gridutil


class Pathfinder:

	def __init__(self):
		self.occupancy_grid = None #Last occupancy grid received from Octomap
		self.navmatrix = [] #2D map
		self.cam_pose = None #PoseStamped of camera position
		self.path = [] #Path
		self.loc = () #x,y tuple
		self.target = () #x,y tuple
		self.ros_path = Path()

		self.pub = rospy.Publisher('path', Path, latch=True, queue_size=10)
		rospy.Service('pathfinder_target', PathfinderTarget, self.set_target_service)
		rospy.Service('find_path', Trigger, self.find_path_service)
		rospy.Service('find_target', TargetType, self.find_target_service)

		rospy.Subscriber('projected_map', OccupancyGrid, self.listen_grid)
		rospy.Subscriber('orb_slam2_mynteye_s_stereo/pose', PoseStamped, self.listen_position)
		rospy.Subscriber('clicked_point', PointStamped, self.listen_clicked)

		rospy.spin()


	def find_path(self, loc, target):
		"""Takes the 2D map and plots a path from the current location to the target.
		Since self.path is a list, we can pop nodes off of it as we travel to them"""
		grid = Grid(matrix=self.navmatrix)
		start = grid.node(loc[0], loc[1])
		end = grid.node(target[0], target[1])
		finder = AStarFinder(diagonal_movement=DiagonalMovement.only_when_no_obstacle)
		path, runs = finder.find_path(start, end, grid)
		path.reverse() #Put nodes into driving order
		if len(path) > 0: path.pop() #Remove the starting node we're in
		self.path = path
		rospy.loginfo(grid.grid_str(path=self.path, start=start, end=end))
		self.publish_path(path)


	def unpack_navmatrix(self, data):
		"""Turn OccupancyGrid into list of python lists"""
		meta = data.info
		self.navmatrix = [map(gridutil.pfval, data.data[i:i+meta.width]) for i in range(0, len(data.data), meta.width)]
		rospy.loginfo("MAP: w: {}, h: {}, res: {}".format(meta.width, meta.height, meta.resolution))
		

	def publish_path(self, path):
		"""Format the list into an ROS Path message and publish"""
		res = self.occupancy_grid.info.resolution
		self.ros_path = Path()
		self.ros_path.header.frame_id = "map"
		
		for node in path:
			pose = PoseStamped()
			pose.pose.position.x = (node[0] * res) + (res/2)
			pose.pose.position.y = (node[1] * res) + (res/2)
			pose.pose.position.z = 0
			pose.pose.orientation.x = float(0)
			pose.pose.orientation.y = float(0)
			pose.pose.orientation.z = float(0)
			pose.pose.orientation.w = float(0)
			self.ros_path.poses.append(pose)
			
		self.pub.publish(self.ros_path)


	def listen_grid(self, data):
		"""Listen to octomap_server for an OccupancyGrid"""
		self.occupancy_grid = data
		self.unpack_navmatrix(data)


	def listen_position(self, data):
		"""Listen to orb_slam2 for the current camera position.
		Don't process position until grid has been received"""
		if self.occupancy_grid is None:
			return
		self.cam_pose = data
		point = data.pose.position
		self.loc = gridutil.point_to_grid(point, self.occupancy_grid)
		rospy.loginfo("POS: x: {}, y: {}".format(self.loc[0], self.loc[1]))


	def listen_clicked(self, data):
		"""If a point is clicked in rviz, use it as a pathfinding target."""
		clicked = gridutil.point_to_grid(data.point, self.occupancy_grid)
		self.target = clicked
		rospy.loginfo("CLICKED: x: {}, y: {}".format(clicked[0], clicked[1]))
		self.find_path(self.loc, clicked)


	def set_target_service(self, data):
		"""Another node can set the pathfinding target by sending a
		Point(x,y,z) to the /pathfinder_target service."""
		if self.occupancy_grid is None:
			return
		self.target = gridutil.point_to_grid(data.point, self.occupancy_grid)
		self.find_path(self.loc, self.target)
		return PathfinderTargetResponse(self.ros_path)


	def find_path_service(self, data):
		"""Triggering the /find_path service will cause the node
		to find a path to the established target, and publish
		it to the /path topic."""
		if self.occupancy_grid is None or not self.target:
			return TriggerResponse(success=False)
		else:
			self.find_path(self.loc, self.target)
			return TriggerResponse(success=True)


	def find_target_service(self, data):
		"""When the Core node is ready, it will specify a type of target for
		the Pathfinder to seek out and set as the pathfinding target.
		A value of 'home' will seek the dumping area and a value of 'mining'
		will cause an arbitrary free space on the navmatrix to be chosen."""
		if self.occupancy_grid is None or not self.loc:
			return TargetTypeResponse(success=False)

		if data.type.lower() == 'home':
			# Get base location from QR code tracker and set as target
			self.target = (0,0)
		else:
			# Choose arbitrary mining target
			# Random for current testing, but in practice we should do something
			# like check the base location (via QR code tracker) and drive to a
			# point on the opposite half of the field.
			x = None
			y = None
			while not x or not y or self.navmatrix[y][x] < 1:
				x = random.randint(0, len(self.navmatrix[0])-1)
				y = random.randint(0, len(self.navmatrix)-1)
			self.target = (x,y)

		self.find_path(self.loc, self.target)
		return TargetTypeResponse(success=(len(self.ros_path.poses) > 0))
		


if __name__ == '__main__':
	try:
		rospy.init_node('pathfinder')
		Pathfinder()
	except rospy.ROSInterruptException:
		pass
	
